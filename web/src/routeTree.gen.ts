/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as IndexImport } from './routes/index';
import { Route as DevEditImport } from './routes/dev/edit';
import { Route as DevDashboardImport } from './routes/dev/dashboard';

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const DevEditRoute = DevEditImport.update({
  id: '/dev/edit',
  path: '/dev/edit',
  getParentRoute: () => rootRoute,
} as any);

const DevDashboardRoute = DevDashboardImport.update({
  id: '/dev/dashboard',
  path: '/dev/dashboard',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/dev/dashboard': {
      id: '/dev/dashboard';
      path: '/dev/dashboard';
      fullPath: '/dev/dashboard';
      preLoaderRoute: typeof DevDashboardImport;
      parentRoute: typeof rootRoute;
    };
    '/dev/edit': {
      id: '/dev/edit';
      path: '/dev/edit';
      fullPath: '/dev/edit';
      preLoaderRoute: typeof DevEditImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/dev/dashboard': typeof DevDashboardRoute;
  '/dev/edit': typeof DevEditRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/dev/dashboard': typeof DevDashboardRoute;
  '/dev/edit': typeof DevEditRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/dev/dashboard': typeof DevDashboardRoute;
  '/dev/edit': typeof DevEditRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/dev/dashboard' | '/dev/edit';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/dev/dashboard' | '/dev/edit';
  id: '__root__' | '/' | '/dev/dashboard' | '/dev/edit';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DevDashboardRoute: typeof DevDashboardRoute;
  DevEditRoute: typeof DevEditRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DevDashboardRoute: DevDashboardRoute,
  DevEditRoute: DevEditRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dev/dashboard",
        "/dev/edit"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dev/dashboard": {
      "filePath": "dev/dashboard.tsx"
    },
    "/dev/edit": {
      "filePath": "dev/edit.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
